{
  "openapi": "3.0.0",
  "info": {
    "title": "Product Service",
    "description": "This is a shop API",
    "contact": {
      "name": "Chiel Bleyenbergh"
    },
    "version": "0.0.0"
  },
  "tags": [
    {
      "name": "Product"
    }
  ],
  "paths": {
    "/api/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "operationId": "Products_GetAll",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "meta",
                    "data"
                  ],
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/PaginatedMeta"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      },
                      "example": []
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Product"
        ],
        "operationId": "Products_Create",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreate"
              }
            }
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "operationId": "Products_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "operationId": "Products_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Product"
        ],
        "operationId": "Products_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "404": {
            "description": "The server cannot find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreateOrUpdate"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AvailabilityStatus": {
        "type": "string",
        "enum": [
          "In Stock",
          "Low Stock",
          "Out of Stock"
        ],
        "example": "Low Stock"
      },
      "BadRequest": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The status code for the error"
          },
          "message": {
            "type": "string",
            "example": "Bad Request",
            "description": "A more descriptive message about the error"
          }
        }
      },
      "Category": {
        "type": "string",
        "enum": [
          "Cookie"
        ],
        "example": "Cookie"
      },
      "NotFound": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The status code for the error"
          },
          "message": {
            "type": "string",
            "example": "Not Found",
            "description": "A more descriptive message about the error"
          }
        }
      },
      "PaginatedMeta": {
        "type": "object",
        "required": [
          "page",
          "pageSize",
          "total",
          "totalPages",
          "hasNextPage",
          "hasPrevPage"
        ],
        "properties": {
          "page": {
            "type": "integer",
            "example": 1,
            "minimum": 1
          },
          "pageSize": {
            "type": "integer",
            "example": 10,
            "minimum": 1,
            "maximum": 100
          },
          "total": {
            "type": "integer",
            "example": 100
          },
          "totalPages": {
            "type": "integer",
            "example": 10
          },
          "hasNextPage": {
            "type": "boolean",
            "example": false
          },
          "hasPrevPage": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "category",
          "price",
          "discountPercentage",
          "rating",
          "stock",
          "availabilityStatus",
          "thumbnail",
          "images",
          "reviews",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/objectId"
              }
            ],
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "Original Cookie",
            "minLength": 1,
            "maxLength": 20
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
            "minLength": 1,
            "maxLength": 100
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "price": {
            "type": "number",
            "example": 9.99,
            "minimum": 0
          },
          "discountPercentage": {
            "type": "number",
            "example": 0,
            "minimum": 0
          },
          "rating": {
            "type": "number",
            "example": 0,
            "minimum": 0,
            "maximum": 5
          },
          "stock": {
            "type": "number",
            "example": 0,
            "minimum": 0
          },
          "availabilityStatus": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          },
          "thumbnail": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date & time the resources was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date & time the resources was last updated"
          }
        }
      },
      "ProductCreate": {
        "type": "object",
        "required": [
          "name",
          "description",
          "category",
          "price",
          "discountPercentage",
          "rating",
          "stock",
          "availabilityStatus",
          "thumbnail",
          "images",
          "reviews"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Original Cookie",
            "minLength": 1,
            "maxLength": 20
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
            "minLength": 1,
            "maxLength": 100
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "price": {
            "type": "number",
            "example": 9.99,
            "minimum": 0
          },
          "discountPercentage": {
            "type": "number",
            "example": 0,
            "minimum": 0
          },
          "rating": {
            "type": "number",
            "example": 0,
            "minimum": 0,
            "maximum": 5
          },
          "stock": {
            "type": "number",
            "example": 0,
            "minimum": 0
          },
          "availabilityStatus": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          },
          "thumbnail": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          }
        }
      },
      "ProductCreateOrUpdate": {
        "type": "object",
        "required": [
          "name",
          "description",
          "category",
          "price",
          "discountPercentage",
          "rating",
          "stock",
          "availabilityStatus",
          "thumbnail",
          "images",
          "reviews"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Original Cookie",
            "minLength": 1,
            "maxLength": 20
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
            "minLength": 1,
            "maxLength": 100
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "price": {
            "type": "number",
            "example": 9.99,
            "minimum": 0
          },
          "discountPercentage": {
            "type": "number",
            "example": 0,
            "minimum": 0
          },
          "rating": {
            "type": "number",
            "example": 0,
            "minimum": 0,
            "maximum": 5
          },
          "stock": {
            "type": "number",
            "example": 0,
            "minimum": 0
          },
          "availabilityStatus": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          },
          "thumbnail": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          }
        }
      },
      "Review": {
        "type": "object",
        "required": [
          "rating",
          "comment",
          "date",
          "reviewerName",
          "reviewerEmail"
        ],
        "properties": {
          "rating": {
            "type": "number",
            "example": 1,
            "minimum": 1,
            "maximum": 5
          },
          "comment": {
            "type": "string",
            "example": "Very unhappy with my purchase!",
            "minLength": 1,
            "maxLength": 100
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "reviewerName": {
            "type": "string",
            "example": "John Doe"
          },
          "reviewerEmail": {
            "type": "string",
            "example": "john.doe@test.com"
          }
        }
      },
      "ServerError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The status code for the error"
          },
          "message": {
            "type": "string",
            "example": "Server Error",
            "description": "A more descriptive message about the error"
          }
        }
      },
      "objectId": {
        "type": "string",
        "example": "66b110c33b57a8e773000001",
        "pattern": "^[0-9a-fA-F]{24}$"
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Server",
      "variables": {}
    }
  ]
}
